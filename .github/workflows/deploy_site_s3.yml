name: Deploy site to s3 for each PR
on:
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout files
          uses: actions/checkout@v3
        - uses: hashicorp/setup-terraform@v2
        - name: Verify terraform files format
          run: terraform -chdir="terraform" fmt -check
          id: terraform_fmt
        - name: Init terraform
          run: terraform -chdir="terraform" init
          id: terraform_init
        - name: Check if terraform files are valids
          run: terraform -chdir="terraform" validate -no-color
          id: terraform_validate
        - name: Terraform plan
          run: |
          echo "aws_credential = {
                  AWS_ACCESS_KEY_ID     = \"${{ secrets.AWS_ACCESS_KEY_ID }}\"
                  AWS_SECRET_ACCESS_KEY = \"${{ secrets.AWS_SECRET_ACCESS_KEY }}\"
                }

                bucket_name = \"corentin-ducatez-${{ github.ref_name }}-bucket\"" > terraform/tmp_variables.tfvars
          terraform -chdir="terraform" plan -no-color -input=false -var ''
          id: terraform_plan
          continue-on-error: true
        - name: Update Pull Request
          uses: actions/github-script@v6
          env:
            PLAN: "terraform\n${{ steps.terraform_plan.outputs.stdout }}\n${{ steps.terraform_plan.outputs.stderr }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const output = `#### Terraform Format and Style 🖌\`${{ steps.terraform_fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.terraform_init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.terraform_plan.outcome }}\`
              #### Terraform Validation 🤖\`${{ steps.terraform_validate.outcome }}\`

              <details><summary>Show Plan</summary>

              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`

              </details>

              Bucket is available at url: `terraform -chdir="terraform" output -no-color website_endpoint`

              *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
        # This step highlights whenever a plan fails because the "Terraform Plan" step continues on error.
        - name: Terraform Plan Status
          if: steps.terraform_plan.outcome == 'failure'
          run: exit 1
        - name: Terraform Apply
          run: terraform -chdir="terraform" apply -auto-approve -input=false