name: Deploy site to s3 for each PR
on:
  push:
    branches:
      - master
      - develop
    paths:
      - 'terraform/**'
      - 'docs/**'
  pull_request:

env:
  BASE_NAME_BUCKET: corentin-ducatez-resume-bucket

jobs:
  set_environment_name:
    runs-on: ubuntu-latest
    steps:
      - name: Some check on branch
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "::set-output name=env_name::production"
          else
            echo "::set-output name=env_name::staging"
          fi
    outputs:
      environment_name: ${{ steps.branch_check.outputs.env_name }}
  terraform_check_and_deploy:
    runs-on: ubuntu-latest
    needs:
      - set_environment_name
    environment: ${{ needs.set_environment_name.outputs.environment_name }}
    steps:
      - uses: hashicorp/setup-terraform@v2
      - name: Checkout files
        uses: actions/checkout@v3
      - name: Verify terraform files format
        run: terraform -chdir="terraform" fmt -check
        id: terraform_fmt
      - name: Init terraform
        run: terraform -chdir="terraform" init
        id: terraform_init
      - name: Check if terraform files are valids
        run: terraform -chdir="terraform" validate -no-color
        id: terraform_validate
      - name: Prepare tfvars file with needed variables
        run: |
          raw_bucket_name="${{ env.BASE_NAME_BUCKET }}-${{ github.ref_name }}"
          echo "::set-output name=bucket_name::${raw_bucket_name////-}"
          echo "aws_credential = {
              AWS_ACCESS_KEY_ID     = \"${{ secrets.AWS_ACCESS_KEY_ID }}\"
              AWS_SECRET_ACCESS_KEY = \"${{ secrets.AWS_SECRET_ACCESS_KEY }}\"
            }

          bucket_name = \"${raw_bucket_name////-}\"" > terraform/tmp_variables.tfvars
        id: tfvars_file
      - name: Try to import bucket if it does already exists (to prevent error)
        run: terraform -chdir="terraform" import -var-file "tmp_variables.tfvars" aws_s3_bucket.main_bucket "${{ steps.tfvars_file.outputs.bucket_name }}"
        continue-on-error: true
      - name: Terraform plan
        run: terraform -chdir="terraform" plan -no-color -input=false -var-file "tmp_variables.tfvars"
        id: terraform_plan
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.terraform_plan.outputs.stdout }}\n${{ steps.terraform_plan.outputs.stderr }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.terraform_fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.terraform_init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.terraform_plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.terraform_validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # This step highlights whenever a plan fails because the "Terraform Plan" step continues on error.
      - name: Terraform Plan Status
        if: steps.terraform_plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply (retrieve outputs)
        run: terraform -chdir="terraform" apply -auto-approve -input=false -var-file "tmp_variables.tfvars"
      - name: Set variable in config
        run: |
          website_endpoint=`terraform-bin -chdir="terraform" output -raw website_endpoint`
          ## MUST keep url in 'http' format (not https)
          echo -e "\naws_s3_url: http://$website_endpoint
          url: http://$website_endpoint
          domain: http://$website_endpoint" >> docs/_config.yml
          echo "::set-output name=website_endpoint::http://$website_endpoint"
        id: set_website_endpoint
      - name: Jekyll build
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./docs/_site
          verbose: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Archive Website
        uses: actions/upload-artifact@v3
        with:
          name: Resume website
          path: docs/_site/**
      - name: Terraform Apply (deploy website)
        run: terraform -chdir="terraform" apply -auto-approve -input=false -var-file "tmp_variables.tfvars"
    outputs:
      website_endpoint: ${{ steps.set_website_endpoint.outputs.website_endpoint }}
      bucket_name: ${{ steps.tfvars_file.outputs.bucket_name }}
  call-build-pdf-send-s3-workflow:
    needs: 
      - set_environment_name
      - terraform_check_and_deploy
    # Call build pdf workflow
    uses: "./.github/workflows/build_pdf_send_s3.yml"
    secrets: inherit
    with:
      AWS_S3_BUCKET: ${{ needs.terraform_check_and_deploy.outputs.bucket_name }}
      URL: ${{ needs.terraform_check_and_deploy.outputs.website_endpoint }}
      ENVIRONMENT_NAME: ${{ needs.set_environment_name.outputs.environment_name }}